//
//  Tools.swift
//  ExpensesWallet
//
//  Created by Giovanni Madalozzo on 16/03/21.
//

import Foundation

struct Tools {
    
    func startMenu(listAccounts:[Account]) ->[Account]{
        var listAccounts = listAccounts
        print("""
        \nüí∏ Por favor, digite a op√ß√£o que deseja üí∏
        selecionar ‚û£ Op√ß√£o para selecionar uma conta banc√°ria j√° existente
        criar ‚û£ Op√ß√£o para criar uma nova conta banc√°ria
        editar ‚û£ Op√ß√£o para editar uma conta banc√°ria
        deletar ‚û£ Op√ß√£o para deletar uma conta banc√°ria
        sair ‚û£ Op√ß√£o para sair do programa
        help ‚û£ Op√ß√£o para abrir o menu de ajuda\n
        """)
        
        let option = readLine()
        
        switch option {
        case "selecionar":
            if listAccounts.isEmpty{
                print("\nVoc√™ n√£o tem contas registradas. üò• \nPor favor, registre uma nova conta.")
                listAccounts = self.registerAccount(listAccounts: listAccounts)
            } else{
                var selectedAccount: Account
                selectedAccount = self.selectAccount(listAccounts: listAccounts)
                self.accountMenu(selectedAccount: selectedAccount)
            }
        case "criar":
            listAccounts = self.registerAccount(listAccounts: listAccounts)
            self.startMenu(listAccounts: listAccounts)
        case "deletar":
            listAccounts = self.deleteAccount(listAccounts: listAccounts)
            self.startMenu(listAccounts: listAccounts)
        case "editar":
            self.editAccount(listAccounts: listAccounts)
        case "sair":
            self.quit()
        case "help":
            self.helpStartMenu()
            self.startMenu(listAccounts: listAccounts)
        default:
            print("Nenhuma op√ß√£o identificada. üò•\n")
            self.startMenu(listAccounts: listAccounts)
        }
        return listAccounts
    }
    
    func accountMenu(selectedAccount: Account){
        print("""
        \nüí∏ MENU DE OP√á√ïES DA CONTA üí∏\n
        Por favor, digite a op√ß√£o que deseja:
        info ‚û£ Op√ß√£o para exibir as informa√ß√µes da conta selecionada
        extrato ‚û£ Op√ß√£o para exibir o hist√≥rico da conta
        add gasto ‚û£ Op√ß√£o para adicionar gastos recorrentes
        add cr√©dito ‚û£ Op√ß√£o para adicionar cr√©dito recorrentes
        editar ‚û£ Op√ß√£o para editar uma transa√ß√£o
        deletar ‚û£ Op√ß√£o para deletar uma transa√ß√£o
        voltar ‚û£ Op√ß√£o para voltar para o menu de sele√ß√£o de contas
        sair ‚û£ Op√ß√£o para sair do programa
        help ‚û£ Op√ß√£o para abrir o menu de ajuda\n
        """)
        
        let option = readLine()
        
        switch option {
        case "info":
            print("\nTipo: \(selectedAccount.type) | Banco: \(selectedAccount.bank) | Apelido: \(selectedAccount.nickname)")
        case "extrato":
            selectedAccount.report(account: selectedAccount)
        case "sair":
            self.quit()
        case "add gasto":
            var purchases = Purchases()
            print(purchases.add(account: selectedAccount))
        case "add cr√©dito":
            var earnings = Earnings()
            earnings.add(account: selectedAccount)
        case "editar":
            self.editEntry(selectedAccount: selectedAccount)
        case "deletar":
            self.removeEntry(selectedAccount: selectedAccount)
        case "voltar":
            self.startMenu(listAccounts: listAccounts)
        case "help":
            self.helpAccountMenu()
            self.accountMenu(selectedAccount: selectedAccount)
        default:
            print("Nenhuma op√ß√£o identificada. üò•\n")
            self.accountMenu(selectedAccount: selectedAccount)
        }
        
        self.accountMenu(selectedAccount: selectedAccount)
    }
    
    func helpStartMenu(){

        print("""
        \nüí∏ BEM VINDO AO MENU DE AJUDA üí∏\n
        selecionar: esta op√ß√£o permite que o usu√°rio escolha uma das contas inseridas no programa pelo usu√°rio. Para acessar uma conta a partir desta op√ß√£o, basta digitar o n√∫mero da conta desejada que √© informado na tela. Para selecionar esta op√ß√£o, digite 'selecionar' no terminal (sem as aspas).\n
        criar: esta op√ß√£o permite ao usu√°rio inserir uma nova conta no programa. Nesta op√ß√£o, o usu√°rio pode entrar com o tipo de conta (corrente ou poupan√ßa), o banco ao qual a conta pertence e tamb√©m um apelido para a conta. Para selecion√°-la, digite 'criar' no terminal (sem as aspas).\n
        editar: esta op√ß√£o permite a edi√ß√£o de uma conta registrada pelo usu√°rio. O usu√°rio pode selecionar a conta e editar qualquer caracter√≠stica da mesma. Para selecion√°-la, digite 'editar' no terminal (sem as aspas).\n
        deletar: esta op√ß√£o permite ao usu√°rio deletar uma conta registrada no programa. Para selecion√°-la, digite 'deletar" no terminal (sem as aspas). \n
        sair: esta op√ß√£o encerra o programa. Para voltar a utilizar o ExpensesWallet, o usu√°rio deve iniciar o programa novamente. Para selecionar esta op√ß√£o, digite 'sair' no terminal (sem as aspas).\n
        """)

    }
    
    func helpAccountMenu(){
    
        print("""
        \nüí∏ BEM VINDO AO MENU DE AJUDA üí∏\n
        info: esta op√ß√£o mostra as informa√ß√µes da conta selecionada. Ela exibe o tipo de conta, o banco ao qual a conta pertence e o apelido da conta. Para selecion√°-la, digite 'info' no terminal (sem as aspas).\n
        extrato: esta op√ß√£o mostra o extrato da conta selecionada. Ela exibe as datas das transa√ß√µes, mostra se foi um cr√©dito ou um d√©bito e mostra o valor das transa√ß√µes. Para selecion√°-la, digite 'extrato' no terminal (sem as aspas).\n
        add gasto: esta op√ß√£o permite ao usu√°rio inserir uma transa√ß√£o de d√©bito. Ela permite que o usu√°rio entre com o valor do d√©bito e tamb√©m o dia da transa√ß√£o. Para selecion√°-la, digite 'add gasto' no terminal (sem as aspas).\n
        add cr√©dito: esta op√ß√£o permite ao usu√°rio inserir uma transa√ß√£o de cr√©dito. Ela permite que o usu√°rio entre com o valor do cr√©dito e tamb√©m o dia da transa√ß√£o. Para selecion√°-la, digite 'add cr√©dito' no terminal (sem as aspas).\n
        editar: esta op√ß√£o permite a edi√ß√£o de uma transa√ß√£o feita pelo usu√°rio. O usu√°rio pode selecionar a transa√ß√£o e editar qualquer caracter√≠stica da mesma. Para selecion√°-la, digite 'editar' no terminal (sem as aspas).\n
        deletar: esta op√ß√£o permite deletar uma transa√ß√£o feita pelo usu√°rio. O usu√°rio pode selecionar a transa√ß√£o e delet√°-la. Para selecion√°-la, digite 'deletar' no terminal (sem as aspas).\n
        voltar: esta op√ß√£o retorna ao menu de sele√ß√£o de contas e permite que o usu√°rio mude a conta com a qual est√° trabalhando. Para selecion√°-la, digite 'voltar' no terminal (sem as aspas).\n
        sair: esta op√ß√£o encerra o programa. Para voltar a utilizar o ExpensesWallet, o usu√°rio deve iniciar o programa novamente. Para selecionar esta op√ß√£o, digite 'sair' no terminal (sem as aspas).\n
        help: esta op√ß√£o abre este menu de ajuda com as explica√ß√µes das fun√ß√µes do programa. Caso queira visualizar o menu de ajuda novamente, digite 'help' no terminal (sem as aspas).\n
        """)
    }
    
    func editEntry(selectedAccount: Account){
        print("\nüí∏ EDITOR DE TRANSA√á√ïES üí∏\n")
        if selectedAccount.historic.isEmpty{
            print("Nenhuma transa√ß√£o registrada üò•")
        }else{
            print("Selecione qual transa√ß√£o deseja editar: ")
            selectedAccount.sortHistoric()
            
            var indexes: [Int] = []
            for (index,item) in selectedAccount.historic.enumerated(){
                print("\(index+1) - Data da transa√ß√£o: \(item[0]) | Tipo da transa√ß√£o: \(item[1]) | Valor da transa√ß√£o: \(item[2])")
                indexes.append(index)
            }
            let transaction = readLine()
            guard let indexUnwrapped = transaction else{
                print("Op√ß√£o inv√°lida. üò•\nTente novamente.")
                self.editEntry(selectedAccount: selectedAccount)
                return
            }
            guard let  indexIntAux = Int(indexUnwrapped) else{
                print("Op√ß√£o inv√°lida. üò•\nTente novamente. ")
                self.editEntry(selectedAccount: selectedAccount)
                return
            }
            let indexInt = indexIntAux-1
            
            if indexes.contains(indexInt){
                print("\n TRANSA√á√ÉO ESCOLHIDA: Data da transa√ß√£o: \(selectedAccount.historic[indexInt][0]) | Tipo da transa√ß√£o: \(selectedAccount.historic[indexInt][1]) | Valor da transa√ß√£o: \(selectedAccount.historic[indexInt][2])\n")
                print("Deseja alterar o tipo de transa√ß√£o? (s/n)")
                let transactionChange = readLine()
                
                switch transactionChange{
                case "s":
                    if selectedAccount.historic[indexInt][1] == "Cr√©dito" {
                        print("Troca da transa√ß√£o para d√©bito realizada com sucesso! ‚úÖ\n")
                        selectedAccount.historic[indexInt][1] = "D√©bito"
                    }else{
                        print("Troca da transa√ß√£o para cr√©dito realizada com sucesso! ‚úÖ\n")
                        selectedAccount.historic[indexInt][1] = "Cr√©dito"
                    }
                case "n":
                    print("\n")
                default:
                    print("Op√ß√£o inv√°lida, tente novamente. üò•")
                    self.editEntry(selectedAccount: selectedAccount)
                }
                
                print("Deseja alterar a data da transa√ß√£o? (s/n)")
                let dateChange = readLine()
                
                switch dateChange{
                case "s":
                    print("\nDigite o novo dia: ")
                    let newDay = readLine()
                    guard let unwrappedDate2 = newDay else {
                        print("Nenhuma data digitada, tente novamente. üò•")
                        self.editEntry(selectedAccount: selectedAccount)
                        return
                    }
                    guard let unwrappedDate = Int(unwrappedDate2) else{
                        print("Valor n√£o reconhecido, tente novamente. üò•")
                        self.editEntry(selectedAccount: selectedAccount)
                        return
                    }
                    
                    let now = Date()
                    let dateFormatter = DateFormatter()
                    dateFormatter.dateFormat = "LL"
                    let dateMonth = Int(dateFormatter.string(from: now))
                    dateFormatter.dateFormat = "YYYY"
                    let dateYear = Int(dateFormatter.string(from: now))
                    
                    
                    var comp = DateComponents(calendar: .current, year: dateYear, month: dateMonth, day: unwrappedDate)

                    dateFormatter.dateStyle = .short
                    dateFormatter.timeStyle = .none
                    
                    selectedAccount.historic[indexInt][0] = "\(dateFormatter.string(from: comp.date!))"
                    
                    print("Data mudada para \(selectedAccount.historic[indexInt][0]) com sucesso!\n")
                case "n":
                    print("\n")
                default:
                    print("Op√ß√£o inv√°lida, tente novamente. üò•")
                    self.editEntry(selectedAccount: selectedAccount)
                }
                
                print("Deseja alterar o valor da transa√ß√£o? (s/n)")
                let valueChange = readLine()
                
                switch valueChange{
                case "s":
                    print("Digite o novo valor: ")
                    let newValue = readLine()
                    
                    guard let unwrappedValue = newValue else {
                        print("Valor n√£o reconhecido, tente novamente. üò•")
                        self.editEntry(selectedAccount: selectedAccount)
                        return
                    }
                    let numberFormatter = NumberFormatter()
                    numberFormatter.numberStyle = .currency
                    numberFormatter.locale = Locale.current
                    guard let valueDouble = Double(unwrappedValue) else{
                        print("Valor n√£o reconhecido, tente novamente. üò•")
                        self.editEntry(selectedAccount: selectedAccount)
                        return
                    }
                    let valueNS = NSNumber(value: valueDouble)
                    guard let unwrappedValue2 = numberFormatter.string(from: valueNS) else{
                        print("Valor n√£o reconhecido, tente novamente. üò•")
                        self.editEntry(selectedAccount: selectedAccount)
                        return
                    }
                    selectedAccount.historic[indexInt][2] = unwrappedValue2
                    
                    print("Valor mudado para \(selectedAccount.historic[indexInt][2]) com sucesso! ‚úÖ\n")
                case "n":
                    print("\n")
                default:
                    print("Op√ß√£o inv√°lida, tente novamente. üò•")
                    self.editEntry(selectedAccount: selectedAccount)
                }
                print("\nEdi√ß√£o realizada com sucesso! ‚úÖ Data da transa√ß√£o: \(selectedAccount.historic[indexInt][0]) | Tipo da transa√ß√£o: \(selectedAccount.historic[indexInt][1]) | Valor da transa√ß√£o: \(selectedAccount.historic[indexInt][2])\n")
            }else{
                print("Op√ß√£o inv√°lida. üò•\nRetornando para o menu.")
                self.accountMenu(selectedAccount: selectedAccount)
            }
        }
        self.accountMenu(selectedAccount: selectedAccount)
    }
    
    func removeEntry(selectedAccount: Account) {
        print("\nüí∏ DELETAR TRANSA√á√ÉO üí∏\n")
        if selectedAccount.historic.isEmpty{
            print("Nenhuma transa√ß√£o registrada.")
        }else{
            print("Selecione qual transa√ß√£o deseja deletar: ")
            selectedAccount.sortHistoric()
            
            var indexes: [Int] = []
            for (index,item) in selectedAccount.historic.enumerated(){
                print("\(index+1) - Data da transa√ß√£o: \(item[0]) | Tipo da transa√ß√£o: \(item[1]) | Valor da transa√ß√£o: \(item[2])")
                indexes.append(index)
            }
            let transaction = readLine()
            guard let indexUnwrapped = transaction else{
                print("Op√ß√£o inv√°lida. üò• \nRetornando para o menu. ")
                return
            }
            guard let  indexIntAux = Int(indexUnwrapped) else{
                print("Op√ß√£o inv√°lida. üò•\nRetornando para o menu. ")
                return
            }
            let indexInt = indexIntAux-1
            
            if indexes.contains(indexInt){
                selectedAccount.historic.remove(at: indexInt)
                print("\nTransa√ß√£o removida com sucesso! ‚úÖ")
            }else{
                print("Op√ß√£o inv√°lida. üò•\nRetornando para o menu. ")
            }
        }
    }
    
    func registerAccount(listAccounts: [Account]) -> [Account]{
        var listAccounts = listAccounts
        print("\nüí∏ REGISTRO DE NOVA CONTA üí∏\n")
        print("Digite o tipo da conta (corrente ou poupan√ßa): ")
        let type = readLine()
        guard let typeUnwrapped = type else{
            print("Nenhum valor digitado. üò•\nRetornando para o menu. ")
            return listAccounts
        }
        
        print("Digite o banco da conta: ")
        let bank = readLine()
        guard let bankUnwrapped = bank else{
            print("Nenhum valor digitado. üò•\nRetornando para o menu. ")
            return listAccounts
        }
        
        print("Digite um apelido para a conta:")
        let nickname = readLine()
        guard let nicknameUnwrapped = nickname else{
            print("Nenhum valor digitado. üò•\nRetornando para o menu. ")
            return listAccounts
        }
        
        var newAccount = Account(type: typeUnwrapped, bank: bankUnwrapped, nickname: nicknameUnwrapped)
        
        listAccounts.append(newAccount)
        
        print("Nova conta registrada com sucesso! ‚úÖ")
        
        return listAccounts
    }
    
    func selectAccount(listAccounts: [Account]) -> Account{
        
        print("\nüí∏ SELECIONE A CONTA DESEJADA üí∏")
        var indexes: [Int] = []
        for (index, account) in listAccounts.enumerated() {
            print("Op√ß√£o \(index+1) - Tipo: \(account.type)  Banco: \(account.bank)  Apelido: \(account.nickname)")
            indexes.append(index)
        }
        
        let option = readLine()
        guard let optionUnwrapped = option else{
            print("Op√ß√£o n√£o reconhecida. üò•\nRetornando para o menu. ")
            self.startMenu(listAccounts: listAccounts)
            return listAccounts[0]
        }
        guard let optionInt = Int(optionUnwrapped) else{
            print("Op√ß√£o n√£o reconhecida. üò•\nRetornando para o menu. ")
            self.startMenu(listAccounts: listAccounts)
            return listAccounts[0]
        }
        if indexes.contains(optionInt ){
            print("Conta selecionada: \(listAccounts[optionInt-1].nickname)")
            return listAccounts[optionInt-1]
        }else{
            print("Op√ß√£o n√£o reconhecida. üò•\nRetornando para o menu. ")
            self.startMenu(listAccounts: listAccounts)
        }
        return listAccounts[0]
    }
    
    func deleteAccount(listAccounts: [Account]) -> [Account]{
        var listAccounts = listAccounts
        print("\nüí∏ DELETAR CONTA üí∏\n")
        if listAccounts.isEmpty{
            print("Nenhuma conta registrada.")
        }else{
            print("Selecione qual conta deseja deletar: ")
            
            var indexes: [Int] = []
            for (index,item) in listAccounts.enumerated(){
                print("Op√ß√£o \(index+1) - Tipo: \(item.type)  Banco: \(item.bank)  Apelido: \(item.nickname)")
                indexes.append(index)
            }
            let accountIndex = readLine()
            guard let indexUnwrapped = accountIndex else{
                print("Op√ß√£o inv√°lida. üò• \nRetornando para o menu. ")
                self.startMenu(listAccounts: listAccounts)
                return []
            }
            guard let  indexIntAux = Int(indexUnwrapped) else{
                print("Op√ß√£o inv√°lida. üò•\nRetornando para o menu. ")
                self.startMenu(listAccounts: listAccounts)
                return []
            }
            let indexInt = indexIntAux-1
            
            if indexes.contains(indexInt){
                listAccounts.remove(at: indexInt)
                print("\nConta removida com sucesso! ‚úÖ")
            }else{
                print("Op√ß√£o inv√°lida. üò•\nRetornando para o menu. ")
            }
        }
        return listAccounts
    }
    
    func editAccount(listAccounts: [Account]){
        
        print("\nüí∏ EDITOR DE CONTAS üí∏\n")
        if listAccounts.isEmpty{
            print("Nenhuma conta registrada üò•")
        }else{
            print("Selecione qual conta deseja editar: ")
            
            var indexes: [Int] = []
            for (index,item) in listAccounts.enumerated(){
                print("\(index+1) - Tipo da conta: \(item.type) | Banco: \(item.bank) | Apelido: \(item.nickname)")
                indexes.append(index)
            }
            let indexAccount = readLine()
            guard let indexUnwrapped = indexAccount else{
                print("Op√ß√£o inv√°lida. üò•\nRetornando para o menu.")
                self.startMenu(listAccounts: listAccounts)
                return
            }
            guard let  indexIntAux = Int(indexUnwrapped) else{
                print("Op√ß√£o inv√°lida. üò•\nRetornando para o menu. ")
                self.startMenu(listAccounts: listAccounts)
                return
            }
            let indexInt = indexIntAux-1
            
            if indexes.contains(indexInt){
                print("\n CONTA ESCOLHIDA: Tipo da conta: \(listAccounts[indexInt].type) | Banco: \(listAccounts[indexInt].bank) | Apelido: \(listAccounts[indexInt].nickname)\n")
                print("Deseja alterar o tipo de conta? (s/n)")
                let accountChange = readLine()
                
                switch accountChange{
                case "s":
                    print("Digite o novo tipo da conta:")
                    let newType =  readLine()
                    
                    guard let unwrappedNewType = newType else {
                        print("Nenhum tipo digitado, tente novamente. üò•")
                        return
                    }
                    if unwrappedNewType == ""{
                        print("Nenhum tipo foi digitado. O tipo da conta ser√° mantido.")
                    }else{
                        listAccounts[indexInt].type = unwrappedNewType
                        print("Tipo da conta trocado para \(unwrappedNewType) com sucesso! ‚úÖ")
                    }
                case "n":
                    print("\n")
                default:
                    print("Op√ß√£o inv√°lida, tente novamente. üò•")
                    self.editAccount(listAccounts: listAccounts)
                }
                
                print("Deseja alterar o banco da conta? (s/n)")
                let accountName = readLine()
                
                switch accountName{
                case "s":
                    print("\nDigite o novo banco: ")
                    let newBank = readLine()
                    guard let unwrappedNewBank = newBank else {
                        print("Nenhum banco digitado, tente novamente. üò•")
                        self.editAccount(listAccounts: listAccounts)
                        return
                    }
                    
                    if unwrappedNewBank == "" {
                        print("Nenhum banco foi digitado. O banco da conta ser√° mantido.")
                    }else {
                        listAccounts[indexInt].bank = unwrappedNewBank
                        print("Banco mudado para \(unwrappedNewBank) com sucesso! ‚úÖ\n")
                    }
                case "n":
                    print("\n")
                default:
                    print("Op√ß√£o inv√°lida, tente novamente. üò•")
                    self.editAccount(listAccounts: listAccounts)
                }
                
                print("Deseja alterar o apelido da conta? (s/n)")
                let nicknameChange = readLine()
                
                switch nicknameChange{
                case "s":
                    print("Digite o novo apelido: ")
                    let newNickname = readLine()
                    
                    guard let unwrappedNewNickname = newNickname else {
                        print("Valor n√£o reconhecido, tente novamente. üò•")
                        self.editAccount(listAccounts: listAccounts)
                        return
                    }
                    if unwrappedNewNickname == "" {
                        print("Nenhum apelido foi digitado. O apelido da conta ser√° mantido.")
                    }else{
                        listAccounts[indexInt].nickname = unwrappedNewNickname
                        print("Banco mudado para \(unwrappedNewNickname) com sucesso! ‚úÖ\n")
                    }
                case "n":
                    print("\n")
                default:
                    print("Op√ß√£o inv√°lida, tente novamente. üò•")
                    self.editAccount(listAccounts: listAccounts)
                }
                print("\nEdi√ß√£o realizada com sucesso! ‚úÖ Tipo da conta: \(listAccounts[indexInt].type) | Banco: \(listAccounts[indexInt].bank) | Apelido: \(listAccounts[indexInt].nickname)\n")
            }else{
                print("Op√ß√£o inv√°lida. üò•\nRetornando para o menu.")
                self.startMenu(listAccounts: listAccounts)
            }
            }
        self.startMenu(listAccounts: listAccounts)
    }
    
    func quit(){
        print("\n\n\nAt√© mais! ü§ó")
        exit(0)
    }
    
}
